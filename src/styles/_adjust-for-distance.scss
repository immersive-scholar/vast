// The purpose of the adjust-for-distance
// function is to calculate how much
// fontsize should be increased
// based on how far away the users are
// from the display.
// The further they are away,
// the larger the fonts will render.
//
// Reference:
// near: 0-10 ft
// medium: 10-25 ft
// far: 25-50 ft
// very-far: 50+ ft

@use "sass:list";
@use "sass:map";

$distances: near, far;
$elements: h1, h2, h3, h4, h5, h6, p;

$near: (
	'h1': 225,
	'h2': 150,
	'h3': 90,
	'h4': 60,
	'h5': 30,
	'h6': 15,
	'p': 96,
);

$far: (
	'h1': 300,
	'h2': 225,
	'h3': 150,
	'h4': 90,
	'h5': 60,
	'h6': 30,
	'p': 75,
);

@function get-size($distance, $element) {
	@if not list.index($distances, $distance) {
		@error "#{$distance} is not a valid distance. Expected one of #{$distances}.";
	}

	$size: map.get($near, $element);

	@if ($distance == 'far') {
		$size: map.get($far, $element);
	}

	@debug $distance - $element - $size;
	@return #{$size}px;
}

// generates classes, named .distance-near, .distance-far
// that adjust font sizes
@each $distance in $distances {
	@include breakpoint(vast) {
		.distance-#{$distance} {
			h1 {
				font-size: get-size($distance, 'h1');
			}
			h2 {
				font-size: get-size($distance, 'h2');
			}
			h3 {
				font-size: get-size($distance, 'h3');
			}
			h4 {
				font-size: get-size($distance, 'h4');
			}
			h5 {
				font-size: get-size($distance, 'h5');
			}
			h6 {
				font-size: get-size($distance, 'h6');
			}
			p,
			a,
			button,
			* {
				font-size: get-size($distance, 'p');
			}
		}
	}
}

@each $distance in $distances {
	@include breakpoint(vast) {
		.distance-#{$distance} {
			@each $otherDistance in $distances {
				@if $distance != $otherDistance {
					.show-for-#{$otherDistance} {
						display: none !important;
					}
				}
				.show-for-#{$distance} {
					display: block !important;
				}
				.hide-for-#{$distance} {
					display: none !important;
				}
			}
		}
	}
}
