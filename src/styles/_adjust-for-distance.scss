// The purpose of the adjust-for-distance
// function is to calculate how much
// fontsize should be increased
// based on how far away the users are
// from the display.
// The further they are away,
// the larger the fonts will render.
//
// Reference:
// near: 0-10 ft
// medium: 10-25 ft
// far: 25-50 ft
// very-far: 50+ ft

@use "sass:map";

$distance-to-size-ratio: (
	'near': 1,
	'medium': 1.2,
	'far': 1.5,
	'very-far': 2,
);

@function adjust-for-distance($base, $distance) {
	@if not map.get($distance-to-size-ratio, $distance) {
		@error "#{$distance} is not a valid distance. Expected one of #{$distance-to-size-ratio}.";
	}

	// $adjusted-size: $size * map.get($distance-to-size-ratio, $distance);
	$multiplier: map.get($distance-to-size-ratio, $distance);
	$adjusted-size: $base * $multiplier * 1rem;
	// @debug $distance - $adjusted-size;
	@return $adjusted-size;
}

// generates classes, named .distance-near, .distance-medium, etc
// that adjust font sizes
@each $name, $multiplier in $distance-to-size-ratio {
	@include breakpoint(vast) {
		.distance-#{$name} {
			h1 {
				font-size: adjust-for-distance(48, $name);
			}
			h2 {
				font-size: adjust-for-distance(40, $name);
			}
			h3 {
				font-size: adjust-for-distance(31, $name);
			}
			h4 {
				font-size: adjust-for-distance(25, $name);
			}
			h5 {
				font-size: adjust-for-distance(20, $name);
			}
			h6 {
				font-size: adjust-for-distance(16, $name);
			}
			p,
			a,
			button {
				font-size: adjust-for-distance(16, $name);
			}

			.hide-for-#{$name} {
				display: none !important;
			}

			.show-for-#{$name} {
				display: block !important;
			}

			@each $otherName, $multiplier in $distance-to-size-ratio {
				@if $name != $otherName {
					.show-for-#{$otherName} {
						display: none !important;
					}
				}
			}
		}
	}
}
